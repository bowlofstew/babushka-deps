[alias]
    # View abbreviated SHA, description, and history graph of the latest 20 commits
    l = log --pretty=oneline -n 20 --graph --abbrev-commit

    # View more detailed log with stats of the latest 10 commits
    ll = log -n 20 --stat --abbrev-commit

    # View the current working tree status using the short format
    s = status -s

    # Show the diff between the latest commit and the current state
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

    # Show the diff between the latest commit and the current state in-text
    dt = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --color-words --patch-with-stat"

    # `git di $number` shows the diff between the state `$number` revisions ago and the current state
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

    # Pull in remote changes for the current repository and all its submodules
    p = !"git pull; git submodule foreach git pull origin master"

    # Clone a repository including all submodules
    c = clone --recursive

    # Commit with message
    cm = commit -m

    # Commit all changes
    ac = !git add -A && git commit -av

    # Commit all changes with message
    acm = !git add -A && git commit -m

    # Switch to a branch, creating it if necessary
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch -a
    remotes = remote -v

    # Amend the currently staged files to the latest commit
    amend = commit --amend --reuse-message=HEAD

    # Credit an author on the latest commit
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

    # Interactive rebase with the given number of latest commits
    reb = "!r() { git rebase -i HEAD~$1; }; r"

    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"

    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"

    # Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

    # Remove branches that have already been merged with master
    # a.k.a. ‘delete merged’
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

    # Reset to a specified remote branch
    resetToOriginBranch="!fn() { git reset --hard origin/$1 }"

    # List contributors with number of commits
    contributors = shortlog --summary --numbered

    # This version uses only one line per commit, and includes only
    # the commit hash, the subject, and the refs.  The refs are added
    # with '--decorate', which does a much better job than '%d' used
    # below: different colors for different kinds of refs (HEAD vs
    # branches tags), and prefixes tags with 'tag: '.
    grShort = log --graph --pretty=oneline --decorate --abbrev-commit

    # The rest are based on http://stackoverflow.com/a/9074343/470844
    grTwoLines = log --graph --format=format:'%C(red)%h%C(reset) %C(green)(%ad)%C(reset)%C(bold yellow)%d%C(reset) %C(yellow)%an%C(reset)%n''%C(white)%s%C(reset)' --abbrev-commit

    # All entries have an extra newline here :P Using '%+b' to avoid
    # two extra newlines when body is empty though.
    grFull = log --graph --format=format:'%C(red)%h%C(reset) %C(green)(%ad)%C(reset)%C(bold yellow)%d%C(reset) %C(yellow)%an%C(reset)%n''%C(white)%s%C(reset)%n%+b' --abbrev-commit

    # Seems like a bug: git will only accept underline versions of the
    # above aliases.  Also, aliases break zsh completion.
    gr         = !git grtwolines --all
    grTopology = !git grtwolines --all --simplify-by-decoration

    ######################################################################
    # Clean up whitespace.
    #
    # See
    # http://stackoverflow.com/questions/591923/make-git-automatically-remove-trailing-whitespace-before-committing/15398512#15398512
    ######################################################################

    # Check that it's safe to fix whitespace.
    #
    # Called by whitespace fixers below.
    fixws-is-safe = !"\
      if [ -d \"$(git rev-parse --git-dir)/rebase-merge\" ] ; then \
        echo \"Rebase in progress; can't 'git fixws'!\" ; \
        false ; \
      fi"

    # Fix whitespace in the index while preserving a dirty tree, if
    # any.
    #
    # Assuming your index is empty, some useful variations are:
    #
    # - fix whitespace in all changes in all versioned files:
    #
    #     git add -u :/ && git fixws && git reset
    #
    # - fix whitespace in all unversioned files and in all changes in
    #   all versioned files:
    #
    #     git add --all :/ && git fixws && git reset
    #
    # Logic:
    #
    # The 'git stash save' fails if the tree is clean (instead of
    # creating an empty stash :P). So, we only 'stash' and 'pop' if
    # the tree is dirty.
    #
    # The 'git rebase --whitespace=fix HEAD~' throws away the commit
    # if it's empty, and adding '--keep-empty' prevents the whitespace
    # from being fixed. So, we first check that the index is dirty.
    #
    # Also:
    # - '(! git diff-index --quiet --cached HEAD)' is true (zero) if
    #   the index is dirty
    # - '(! git diff-files --quiet .)' is true if the tree is dirty
    #
    # The 'rebase --whitespace=fix' trick is from here:
    # http://stackoverflow.com/a/19156679/470844
    fixws = !"\
      git fixws-is-safe && \
      if (! git diff-files --quiet .) && \
         (! git diff-index --quiet --cached HEAD) ; then \
        git commit -m FIXWS_SAVE_INDEX && \
        git stash save FIXWS_SAVE_TREE && \
        git rebase --whitespace=fix HEAD~ && \
        git stash pop && \
        git reset --soft HEAD~ ; \
      elif (! git diff-index --quiet --cached HEAD) ; then \
        git commit -m FIXWS_SAVE_INDEX && \
        git rebase --whitespace=fix HEAD~ && \
        git reset --soft HEAD~ ; \
      fi"

    # Fix whitespace in the index and the tree.
    #
    # Precede with 'git add -N <files>' to also fix whitespace in
    # unversioned files <files>.
    #
    # Logic:
    #
    # The different cases are:
    # - dirty tree and dirty index
    # - dirty tree and clean index
    # - clean tree and dirty index
    #
    # We have to consider separate cases because the 'git rebase
    # --whitespace=fix' is not compatible with empty commits (adding
    # '--keep-empty' makes Git not fix the whitespace :P).
    fixws-global-tree-and-index = !"\
      git fixws-is-safe && \
      if (! git diff-files --quiet .) && \
         (! git diff-index --quiet --cached HEAD) ; then \
        git commit -m FIXWS_SAVE_INDEX && \
        git add -u :/ && \
        git commit -m FIXWS_SAVE_TREE && \
        git rebase --whitespace=fix HEAD~2 && \
        git reset HEAD~ && \
        git reset --soft HEAD~ ; \
      elif (! git diff-files --quiet .) ; then \
        git add -u :/ && \
        git commit -m FIXWS_SAVE_TREE && \
        git rebase --whitespace=fix HEAD~ && \
        git reset HEAD~ ; \
      elif (! git diff-index --quiet --cached HEAD) ; then \
        git commit -m FIXWS_SAVE_INDEX && \
        git rebase --whitespace=fix HEAD~ && \
        git reset --soft HEAD~ ; \
      fi"

    # Fix whitespace in the index and the tree.
    #
    # BROKEN: Does not work because the 'git rebase --whitespace=fix'
    # is not compatible with empty commits (adding '--keep-empty'
    # makes Git not fix the whitespace :P).
    #
    # fixws-global-tree-and-index =!\
    #   git commit --allow-empty -m FIXWS_SAVE_INDEX && \
    #   git add -u :/ && \
    #   git commit --allow-empty -m FIXWS_SAVE_TREE && \
    #   git rebase --whitespace=fix --keep-empty HEAD~2 && \
    #   git reset HEAD~ && \
    #   git reset --soft HEAD~

    # Fix whitespace in local-tree files (sub-tree rooted at current
    # dir). Fail gracefully if the index is dirty.
    #
    # The if-statements:
    # - if index is clean
    #   - if tree is dirty
    fixws-local-tree =!"\
      cd \"$GIT_PREFIX\" && \
      if git diff-index --quiet --cached HEAD ; then \
        if ! git diff-files --quiet . ; then \
          export GIT_EDITOR=: && \
          git -c apply.whitespace=fix add -ue . && \
          git checkout . && \
          git reset ; \
        fi ; \
      else \
        echo 'Your index is dirty! Bailing ...' >&2 && exit 1 ; \
      fi"

    # Fix whitespace in indexed files. Fail gracefully if the tree is
    # dirty.
    #
    # We 'cd' to the top-level so that commands are relative the whole
    # tree.
    #
    # The if-statements:
    # - if tree is clean
    #   - if index is dirty
    fixws-index =!"\
      cd `git rev-parse --show-toplevel` && \
      if git diff-files --quiet . ; then \
        if ! git diff-index --quiet --cached HEAD ; then \
          export GIT_EDITOR=: && \
          git reset && \
          git -c apply.whitespace=fix add -ue . && \
          git checkout . ; \
        fi ; \
      else \
        echo 'Your tree is dirty! Bailing ...' >&2 && exit 1 ; \
      fi"

    # Fix whitespace in the index and the local tree (sub-tree rooted
    # at current dir).
    #
    # The complicated sequencing in the first branch: hide the index
    # while fixing the tree, and then hide the tree while fixing the
    # index.  The 'git stash' is necessary if there are any
    # non-indexed changes (not just in the current sub-tree, hence the
    # `git rev-parse --show-toplevel`), but fails to create a stash if
    # there are no non-indexed changes.
    #
    # Can't use 'git stash --keep-index' to save the tree first and
    # avoid the 'git commit', since 'git stash' still stashes the
    # indexed changes in this case, and so fixing whitespace errors in
    # the index causes a conflict on 'git stash pop'.
    fixws-local-tree-and-index =!"\
      cd \"$GIT_PREFIX\" && \
      if (! git diff-files --quiet `git rev-parse --show-toplevel`) && \
         (! git diff-index --quiet --cached HEAD) ; then \
        git commit --allow-empty -m FIXWS_SAVE_INDEX && \
        git fixws-local-tree && \
        git stash save FIXWS_SAVE_TREE && \
        git reset --soft 'HEAD^' && \
        git fixws-index && \
        git stash pop ; \
      elif (! git diff-files --quiet .) ; then \
        git fixws-local-tree ; \
      elif (! git diff-index --quiet --cached HEAD) ; then \
        git fixws-index ; \
      fi"

      # This simpler version does not work because 'git stash save'
      # does not create a stash when the tree is clean. In that case,
      # the final 'git stash pop' does not do the right thing!
      #
      # git commit --allow-empty -m FIXWS_SAVE_INDEX && \
      # git fixws-tree && \
      # git stash save FIXWS_SAVE_TREE && \
      # git reset --soft 'HEAD^' && \
      # git fixws-index && \
      # git stash pop

    ######################################################################

[apply]
  # Detect whitespace errors when applying a patch
  whitespace = fix

[commit]
	status = false

[diff]
	algorithm = patience

[fetch]
	output = compact

[init]
	templateDir = ~/.git-template

[log]
	date = local
	decorate = short

[grep]
    extendedRegexp = true

[merge]
	ff = false
	log = 1024

[pull]
	ff = only

[push]
	default = current

[status]
	short = true

[help]
  # Automatically correct and execute mistyped commands
  autocorrect = 1

[user]
    name = <%= git_username %>
    email = <%= git_email %>

[color]
  # Use colors in Git commands that are capable of colored output when
  # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
  ui = auto
  interactive = auto

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]
  meta = yellow bold
  frag = magenta bold # line info
  old = red # deletions
  new = green # additions

[color "status"]
  added = yellow
  changed = green
  untracked = cyan
